<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>树的直径-题解</title>
      <link href="/posts/1138517949/"/>
      <url>/posts/1138517949/</url>
      
        <content type="html"><![CDATA[<p>都是水题啦，你们都能一眼秒的</p><a id="more"></a><h2 id="BZOJ1999-Noip2007-Core树网的核"><a href="#BZOJ1999-Noip2007-Core树网的核" class="headerlink" title="BZOJ1999 [Noip2007] Core树网的核"></a>BZOJ1999 [Noip2007] Core树网的核</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一棵带边权无根树，在其直径上求出一段长度不超过 $s$ 的路径 $F$ ，使得离路径距离最远的点到路径的距离 $ECC$ 最短。</p><p>点 $v$ 到路径 $F$ 距离 $D(v,𝐹)$ $=$ $min⁡$ { $d(v,u)$ } , $u$ 为路径上的点</p></blockquote><p>$$<br>n \leq 500000,s &lt; 2^{32} ，所有边权&lt;500<br>$$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>对距离 $ECC$ 产生贡献的点来自以下几个部分</p><ul><li>直径的端点</li><li>路径上的点到非直径上点的距离</li></ul><p>对于<strong>直径的端点</strong>，我们有个结论，离一个点距离最远的点是直径的一个端点</p><p>因而我们无需考虑直径上除端点外的其它点，</p><p>那么路径 $F$ 尽可能大，才能保证这部分贡献尽可能小</p><p>但这只是一个部分，我们还要考虑<strong>路径上的点到非直径上点的距离</strong>的贡献</p><p>这部分贡献可能会更大，使实际上的距离 $ECC$ 比<strong>直径的端点</strong>影响造成的 $ECC$ 大，</p><p>以至于掩盖住<strong>直径的端点</strong>的贡献，所以我们要取 $max$ 保证符合定义</p><p>求这部分贡献可以对路径上每个点 $dfs$ 解决</p><p>因为<strong>在直径上且在路径外的点</strong>到<strong>非直径点的距离</strong>一定小于等于<strong>直径的端点</strong>的贡献</p><p>没有影响，为了方便，我们对整个直径上的的点 $dfs$，</p><h3 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(a,b) ((a)&lt;(b))?(a):(b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a,b) ((a)&gt;(b))?(a):(b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">char</span> ch;<span class="keyword">int</span> f=<span class="number">1</span>;ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);) &#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);) x=x*<span class="number">10</span>+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">500005</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGEE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt,wei,to;</span><br><span class="line">&#125;edge[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[N],tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++tot].nxt=head[x];</span><br><span class="line">    edge[tot].to=y;</span><br><span class="line">    edge[tot].wei=v;</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,s,maxn,maxp,ls;</span><br><span class="line"><span class="keyword">int</span> dep[N],is_d[N],pre[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pre[x]=fa;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&gt;maxn)</span><br><span class="line">    &#123;</span><br><span class="line">        maxp=x;</span><br><span class="line">        maxn=dep[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tt=edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(tt==fa||is_d[tt]) <span class="keyword">continue</span>;</span><br><span class="line">        dep[tt]=dep[x]+edge[i].wei;</span><br><span class="line">        dfs(tt,x);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x,y,w,ans=INF;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(n);read(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        read(x);read(y);read(w);</span><br><span class="line">        add(x,y,w);add(y,x,w);</span><br><span class="line">    &#125;</span><br><span class="line">    maxn=-INF;</span><br><span class="line">    dep[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    ls=maxp;</span><br><span class="line">    maxn=-INF;</span><br><span class="line">    dep[ls]=<span class="number">0</span>;</span><br><span class="line">    dfs(ls,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=maxp,j=maxp;i;i=pre[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(dep[j]-dep[i]&gt;s) j=pre[j];</span><br><span class="line">        ans=min(ans,max(dep[i],maxn-dep[j]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=maxp;i;i=pre[i])</span><br><span class="line">        is_d[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=maxp;i;i=pre[i])</span><br><span class="line">    &#123;</span><br><span class="line">        dep[i]=<span class="number">0</span>;</span><br><span class="line">        dfs(i,pre[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        ans=max(ans,dep[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="UVA11695-Flight-Planning"><a href="#UVA11695-Flight-Planning" class="headerlink" title="UVA11695  Flight  Planning"></a>UVA11695  Flight  Planning</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给一个 $N$ 个节点边权为 1 的无根树，去掉一条边，新增一条边，求新的树的最长链，问怎么去边和加边，使得最长链的长度最小</p></blockquote><p>$$<br>1 \leq n \leq 2500<br>$$</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>我们可以枚举每一条要删去的边</p><p>去掉这条边后，最小的树的直径会出现在以下几种情况中</p><ul><li>子树 $A$ 的直径</li><li>子树 $B$ 的直径</li><li>加边后树的直径</li></ul><p>子树 $A$ ，$B$ 的直径是固定的，所以我们要保证加边后树的直径最小</p><p>所以要在子树中找到一个点使其到该子树其他点的最大距离最小</p><p>很显然，这个点一定是直径的中点，</p><p>子树的这两个点就是要连边的节点</p><h3 id="code-1"><a href="#code-1" class="headerlink" title="$code$"></a>$code$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">char</span> ch;<span class="keyword">int</span> f=<span class="number">1</span>;ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);) &#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);) x=x*<span class="number">10</span>+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5005</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGEE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt,from,to;</span><br><span class="line">&#125;edge[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[N],tot;</span><br><span class="line"><span class="keyword">int</span> T,n,x,y,addA,addB,p_addA,p_addB,lenA,lenB,delA,delB,ans=INF;</span><br><span class="line"><span class="keyword">int</span> dep[N],pre[N],maxp,maxn=-INF,minn=INF,rbq,ls;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++tot].nxt=head[x];</span><br><span class="line">    edge[tot].from=x;</span><br><span class="line">    edge[tot].to=y;</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa,<span class="keyword">const</span> <span class="keyword">int</span> &amp;del)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pre[x]=fa;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&gt;maxn)</span><br><span class="line">    &#123;</span><br><span class="line">        maxp=x;</span><br><span class="line">        maxn=dep[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i==del||i==(del+<span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> tt=edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(tt==fa) <span class="keyword">continue</span>;</span><br><span class="line">        dep[tt]=dep[x]+<span class="number">1</span>;</span><br><span class="line">        dfs(tt,x,del);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> del)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//memset(pre,0,sizeof(pre));</span></span><br><span class="line">    maxp=edge[del].from;</span><br><span class="line">    maxn=-INF;</span><br><span class="line">    minn=INF;</span><br><span class="line">    dep[edge[del].from]=<span class="number">0</span>;</span><br><span class="line">    dfs(edge[del].from,<span class="number">0</span>,del);</span><br><span class="line"></span><br><span class="line"><span class="comment">//memset(pre,0,sizeof(pre));</span></span><br><span class="line">    ls=maxp;</span><br><span class="line">    maxn=-INF;</span><br><span class="line">    minn=INF;</span><br><span class="line">    dep[ls]=<span class="number">0</span>;</span><br><span class="line">    dfs(ls,<span class="number">0</span>,del);</span><br><span class="line"></span><br><span class="line">    lenA=maxn;</span><br><span class="line">    p_addA=maxp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lenA/<span class="number">2</span>;i++) p_addA=pre[p_addA];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//--------------------------------------------------</span></span><br><span class="line"><span class="comment">//memset(pre,0,sizeof(pre));</span></span><br><span class="line">    maxp=edge[del].to;</span><br><span class="line">    maxn=-INF;</span><br><span class="line">    minn=INF;</span><br><span class="line">    dep[edge[del].to]=<span class="number">0</span>;</span><br><span class="line">    dfs(edge[del].to,<span class="number">0</span>,del);</span><br><span class="line"></span><br><span class="line"><span class="comment">//memset(pre,0,sizeof(pre));</span></span><br><span class="line">    ls=maxp;</span><br><span class="line">    maxn=-INF;</span><br><span class="line">    minn=INF;</span><br><span class="line">    dep[ls]=<span class="number">0</span>;</span><br><span class="line">    dfs(ls,<span class="number">0</span>,del);</span><br><span class="line"></span><br><span class="line">    lenB=maxn;</span><br><span class="line">    p_addB=maxp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lenB/<span class="number">2</span>;i++) p_addB=pre[p_addB];</span><br><span class="line"></span><br><span class="line">    rbq=max(max(lenA,lenB),(lenA+<span class="number">1</span>)/<span class="number">2</span>+(lenB+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//    cout&lt;&lt;"$"&lt;&lt;lenA&lt;&lt;' '&lt;&lt;lenB&lt;&lt;"$"&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">if</span>(ans&gt;rbq)</span><br><span class="line">    &#123;</span><br><span class="line">        ans=rbq;</span><br><span class="line">        delA=edge[del].from;</span><br><span class="line">        delB=edge[del].to;</span><br><span class="line">        addA=p_addA;</span><br><span class="line">        addB=p_addB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(T);</span><br><span class="line">    <span class="keyword">for</span>(;T--;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">        <span class="built_in">memset</span>(edge,<span class="number">0</span>,<span class="keyword">sizeof</span>(edge));</span><br><span class="line">        tot=<span class="number">0</span>;ans=INF;</span><br><span class="line">        read(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            read(x);read(y);</span><br><span class="line">            add(x,y);add(y,x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i+=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            solve(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,delA,delB);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,addA,addB);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="BZOJ1912-APIO2010-patrol-巡逻"><a href="#BZOJ1912-APIO2010-patrol-巡逻" class="headerlink" title="BZOJ1912  [APIO2010] patrol 巡逻"></a>BZOJ1912  [APIO2010] patrol 巡逻</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://www.luogu.org/problemnew/show/P3629" target="_blank" rel="noopener">链接</a></p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>很显然，当 $k = 1$ 时，找到直径然后连端点就可以了</p><p>当 $k = 2$ 时，我们要找直径和<strong>边不相交</strong>的第二大直径</p><p>当两条直径相交的时候，</p><p>因为加的边必须走，所以第二条加边并没有起到缩短路程的作用，反而多花费了 $1$</p><p>反而不如把边退化成点，长度为 $0$</p><p>找次大直径可以把直径上的边权改成 $-1$ ，再求直径</p><p>由于出现了负边权，用 dfs/bfs 会挂 （可能是我太菜了）</p><p>所以用 $dp$ 求解</p><h3 id="code-2"><a href="#code-2" class="headerlink" title="$code$"></a>$code$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">char</span> ch;<span class="keyword">int</span> f=<span class="number">1</span>;ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);) &#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);) x=x*<span class="number">10</span>+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100005</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGEE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt,wei,to;</span><br><span class="line">&#125;edge[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[N],tot;</span><br><span class="line"><span class="keyword">int</span> n,k,maxn=-INF,maxp,ls,len1,len2; </span><br><span class="line"><span class="keyword">int</span> dep[N],pre[N],dis[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++tot].nxt=head[x];</span><br><span class="line">    edge[tot].to=y;</span><br><span class="line">    edge[tot].wei=<span class="number">1</span>;</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pre[x]=fa;</span><br><span class="line">    <span class="keyword">if</span>(maxn&lt;dep[x])</span><br><span class="line">    &#123;</span><br><span class="line">        maxn=dep[x];</span><br><span class="line">        maxp=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tt=edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(tt==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">//cout&lt;&lt;x&lt;&lt;' '&lt;&lt;tt&lt;&lt;endl;</span></span><br><span class="line">        dep[tt]=dep[x]+edge[i].wei;</span><br><span class="line">        dfs(tt,x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maxlen</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tt=edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(tt==fa) <span class="keyword">continue</span>;</span><br><span class="line">        maxlen(tt,x);</span><br><span class="line"><span class="comment">//cout&lt;&lt;x&lt;&lt;' '&lt;&lt;tt&lt;&lt;endl;</span></span><br><span class="line">        len2=max(len2,dis[x]+dis[tt]+edge[i].wei);</span><br><span class="line">        dis[x]=max(dis[x],dis[tt]+edge[i].wei);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tt=edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(tt==fa||tt!=pre[x]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">//cout&lt;&lt;x&lt;&lt;' '&lt;&lt;tt&lt;&lt;endl;</span></span><br><span class="line">        edge[i].wei=<span class="number">-1</span>;</span><br><span class="line">        edge[i&amp;<span class="number">1</span>?(i+<span class="number">1</span>):(i<span class="number">-1</span>)].wei=<span class="number">-1</span>;</span><br><span class="line">        work(tt,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(n);read(k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        read(x);read(y);</span><br><span class="line">        add(x,y);add(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    maxn=-INF;</span><br><span class="line">    dep[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    ls=maxp;</span><br><span class="line">    maxn=-INF;</span><br><span class="line">    dep[ls]=<span class="number">0</span>;</span><br><span class="line">    dfs(ls,<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    len1=maxn;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">1</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="number">2</span>*(n<span class="number">-1</span>)-len1+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    work(maxp,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    maxlen(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="number">2</span>*(n<span class="number">-1</span>)-len1-len2+<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>树上差分-题解</title>
      <link href="/posts/2952530072/"/>
      <url>/posts/2952530072/</url>
      
        <content type="html"><![CDATA[<p>都是水题啦，你们都能一眼秒的</p><a id="more"></a><h2 id="EOJ-Monthly-2018-8-D-Delivery（水题）"><a href="#EOJ-Monthly-2018-8-D-Delivery（水题）" class="headerlink" title="EOJ Monthly 2018.8 D.Delivery（水题）"></a>EOJ Monthly 2018.8 D.Delivery（水题）</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>有一棵 $N$ 个节点的树 ，树的每条边都有各自的权值 $W_i$ ，在询问开始前，可以交换任一两条边的权值，次数不限，有 $q$ 个询问，每个询问包含一个起点 $S_i$ 和终点 $T_i$ ，从起点到终点经过的边的权值和就是这次询问的花费，求所有询问的最小花费和</p></blockquote><p>$$<br>1 \leq n \leq 2 \times 10^5,1 \leq q \leq 2 \times 10^5<br>$$<br>$$<br>1 \leq u_i,v_i \leq n,u_i \neq v_i<br>$$<br>$$<br>1 \leq w_i \leq 1000<br>$$<br>$$<br>1 \leq s_i,t_i \leq n,s_i \neq t_i<br>$$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这就是求边覆盖次数的裸题啊，覆盖边按覆盖次数给予从小到大的权值就结束啦</p><p>太水不贴代码</p><hr><h2 id="BZOJ4424-CF19E-Fairy（大水题）"><a href="#BZOJ4424-CF19E-Fairy（大水题）" class="headerlink" title="BZOJ4424/CF19E    Fairy（大水题）"></a>BZOJ4424/CF19E    Fairy（大水题）</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>   给定 $N$ 个点，$M$ 条边的无向图，可以从图中删除一条边，问删除哪些边可以使图变成一个二分图。</p></blockquote><p>$$<br>1 \leq n,m \leq 1000000<br>$$</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>首先二分图是没有奇环的，我们要删边来去掉奇环</p><p>只有一条边被所有的奇环覆盖时才能去删它，这样才能保证没有奇环</p><p>如果这条边被偶环覆盖的话，无论怎么删都会出现一个新奇环，这条边是不能删的</p><p>我们对图 $dfs$ 遍历，对边新建出一棵树</p><p>然后这个边的覆盖问题就可以通过树上差分解决</p><h3 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt,to,id;</span><br><span class="line">&#125;edge[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGEE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt,to;</span><br><span class="line">&#125;edge2[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,m,tot=<span class="number">0</span>,tot2=<span class="number">0</span>,top=<span class="number">0</span>,cnt=<span class="number">0</span>,cnt2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> head[N],head2[N],sta[N&lt;&lt;<span class="number">1</span>],pos[N&lt;&lt;<span class="number">1</span>],vis[N&lt;&lt;<span class="number">1</span>],vis2[N&lt;&lt;<span class="number">1</span>],sum[N&lt;&lt;<span class="number">1</span>],fir[N&lt;&lt;<span class="number">1</span>],ans[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++tot].nxt=head[x];</span><br><span class="line">    edge[tot].to=y;</span><br><span class="line">    edge[tot].id=i;</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge2[++tot2].nxt=head2[x];</span><br><span class="line">    edge2[tot2].to=y;</span><br><span class="line">    head2[x]=tot2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> fa,<span class="keyword">int</span> pre_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sta[++top]=now;pos[now]=top;vis[now]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[now];i;i=edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tt=edge[i].to,nid=edge[i].id;</span><br><span class="line">        <span class="keyword">if</span>(nid==pre_id) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(!vis2[nid]) vis2[nid]=<span class="number">1</span>,add2(pre_id,nid),add2(nid,pre_id);</span><br><span class="line">        <span class="keyword">if</span>(!pos[tt]) fir[tt]=nid,dfs(tt,now,nid);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(vis[tt])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((pos[now]-pos[tt]+<span class="number">1</span>)&amp;<span class="number">1</span>) sum[nid]++,sum[fir[tt]]--,cnt++;</span><br><span class="line">            <span class="keyword">else</span> sum[nid]--,sum[fir[tt]]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[now]=<span class="number">0</span>;top--;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head2[now];i;i=edge2[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tt=edge2[i].to;</span><br><span class="line">        <span class="keyword">if</span>(tt==fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfs2(tt,now);</span><br><span class="line">        sum[now]+=sum[tt];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum[now]==cnt) ans[++cnt2]=now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> ROY1994</span></span><br><span class="line">        freopen(<span class="string">"testdata.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">        freopen(<span class="string">"A.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    io&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        io&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        add(x,y,i);</span><br><span class="line">        add(y,x,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(!pos[i]) dfs(i,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    dfs2(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(!cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        io&lt;&lt;m&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">            io&lt;&lt;i&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">        io&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(ans+<span class="number">1</span>,ans+cnt2+<span class="number">1</span>);</span><br><span class="line">    io&lt;&lt;cnt2&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt2;i++)</span><br><span class="line">        io&lt;&lt;ans[i]&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">    io&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2017-SEERC-L-Divide-and-Conquer（巨水题）"><a href="#2017-SEERC-L-Divide-and-Conquer（巨水题）" class="headerlink" title="2017 SEERC  L.  Divide and Conquer（巨水题）"></a>2017 SEERC  L.  Divide and Conquer（巨水题）</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>有一个有 $N$ 个点的由两棵不同的树构成的复合图(无重边)。</p><p>问最少切断几条边，可以使原图不联通。并输出方案数</p></blockquote><p>$$<br>1 \leq n \leq 1000000<br>$$</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>首先切断的边数肯定是 2 ~ 3 </p><p>这是两棵树组成的图，所以只有 $2N-2$ 条边，</p><p>假设切断 4 条边才能保证不联通，那么至少要有 $2N$ 条边，很显然矛盾</p><p>所以肯定切断 2 ~ 3 条边</p><p>那么必然是一颗树上切断 1 条边，另一颗树上切断 1 ~ 2 条边</p><p>我们先以 $A$ 树为主，把 $B$ 树的边作为返祖边/横插边</p><p>那么就相当于求横跨 $A$ 树的属于 $B$ 树的边数，</p><p>这个可以通过树上差分解决</p><p>每个节点的 $sum$ 就是横跨其的 $B$ 树边数</p><p>我们对 $sum+1$ 取最小值 $minn$ 并记录方案数</p><p>如果 $minn=2$ 直接输出</p><p>如果 $minn=3$ 因为可以 $A$ 树断 2 条， $B$ 树断 1 条</p><p>我们交换再统计一次方案加上之前的就是方案数</p><h3 id="code-1"><a href="#code-1" class="headerlink" title="$code$"></a>$code$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> s=<span class="number">0</span>,w=<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">char</span> ch=getchar();</span><br><span class="line">   <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)w=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">   <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) s=s*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">   <span class="keyword">return</span> s*w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100005</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> from,to;</span><br><span class="line">&#125;A[N&lt;&lt;<span class="number">1</span>],B[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGEE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt,to;</span><br><span class="line">&#125;edge[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>,head[N];</span><br><span class="line"><span class="keyword">int</span> f[N][<span class="number">30</span>],dep[N],sum[N],q[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> n,stp,ans,minn=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">int</span> m1,m2;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++tot].nxt=head[x];</span><br><span class="line">    edge[tot].to=y;</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Head=<span class="number">1</span>,tail=<span class="number">0</span>;</span><br><span class="line">    dep[<span class="number">1</span>]=<span class="number">1</span>;f[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    q[++tail]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(Head&lt;=tail)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> now=q[Head++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[now];i;i=edge[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> tt=edge[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dep[tt]) <span class="keyword">continue</span> ;</span><br><span class="line">            dep[tt]=dep[now]+<span class="number">1</span>;</span><br><span class="line">            f[tt][<span class="number">0</span>]=now;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=stp;j++)</span><br><span class="line">                f[tt][j]=f[f[tt][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">            q[++tail]=tt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&lt;dep[y]) swap(x,y);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=stp;i&gt;=<span class="number">0</span>;i--) </span><br><span class="line">        <span class="keyword">if</span>(dep[f[x][i]]&gt;=dep[y]) x=f[x][i];</span><br><span class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=stp;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span>(f[x][i]!=f[y][i]) x=f[x][i],y=f[y][i];</span><br><span class="line">    <span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tt=edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(tt==f[x][<span class="number">0</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(tt);</span><br><span class="line">        sum[x]+=sum[tt];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">1</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(sum[x]+<span class="number">1</span>&lt;minn) minn=sum[x]+<span class="number">1</span>,ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(sum[x]+<span class="number">1</span>==minn) ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ADD</span><span class="params">(<span class="keyword">int</span> ff)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ff==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">            add(A[i].from,A[i].to),add(A[i].to,A[i].from);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">            add(B[i].from,B[i].to),add(B[i].to,B[i].from);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ClearE</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(edge,<span class="number">0</span>,<span class="keyword">sizeof</span>(edge));</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    <span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="keyword">sizeof</span>(sum));</span><br><span class="line">    <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep));</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen("ME.in","r",stdin);</span></span><br><span class="line"><span class="comment">//freopen("ME.out","w",stdout);</span></span><br><span class="line">    n=read();</span><br><span class="line">    stp=(<span class="keyword">int</span>)log2(n)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=read();y=read();</span><br><span class="line">        A[i].from=x,A[i].to=y;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=read();y=read();</span><br><span class="line">        B[i].from=x,B[i].to=y;</span><br><span class="line">    &#125;</span><br><span class="line">    ADD(<span class="number">1</span>);</span><br><span class="line">    bfs();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum[B[i].from]++;</span><br><span class="line">        sum[B[i].to]++;</span><br><span class="line">        sum[lca(B[i].from,B[i].to)]-=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(minn==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,minn,ans);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ClearE();</span><br><span class="line">    ADD(<span class="number">2</span>);</span><br><span class="line">    bfs();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum[A[i].from]++;</span><br><span class="line">        sum[A[i].to]++;</span><br><span class="line">        sum[lca(A[i].from,A[i].to)]-=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,minn,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
